@page "/PurchaseRules/Edit/{id:int}"
@inject HttpClient http
@inject ISnackbar snackbar
<MudCard class="form-card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Edit PurchaseRule</MudText>
        </CardHeaderContent>

    </MudCardHeader>
    <MudCardContent>
        @if (PurchaseRule is null)
        {
            <ProgressIndicator />
        }
        else
        {
            <EditForm Model="@PurchaseRule" OnSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                @* <div class="col-2">
                    <MudTextField Label="ReOrderLevel" @bind-Value="PurchaseRule.ReOrderLevel" For="@(() => PurchaseRule.ReOrderLevel)" />
                </div>

                <div class="col-2">
                    <MudTextField Label="MaxOrderQuantity"
                    @bind-Value="PurchaseRule.MaxOrderQuantity" For="@(() => PurchaseRule.MaxOrderQuantity)" />
                </div> *@
               @*  <div class="col-2">
                    <MudTextField Label="PurchaseType"
                    @bind-Value="PurchaseRule.PurchaseType" For="@(() => PurchaseRule.PurchaseType)" />
                </div> *@

                <div class="c-2">
                    <MudTextField Label="ReOrderLevel"
                    @bind-Value="PurchaseRule.ReOrderLevel" For="@(() => PurchaseRule.ReOrderLevel)" />

                </div>
                <div class="c-2">
                    <MudTextField Label="MaxOrderQuantity"
                    @bind-Value="PurchaseRule.MaxOrderQuantity" For="@(() => PurchaseRule.MaxOrderQuantity)" />

                </div>
                <div class="col-2">
                    <MudSelect @bind-Value="PurchaseRule.PurchaseType" Label="PurchaseType" AdornmentColor="Color.Secondary">
                        @foreach (PurchaseType item in Enum.GetValues(typeof(PurchaseType)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }

                    </MudSelect>
                </div>
                <div class="col-2">
                    <span></span>
                    <div style="display:flex; justify-content:space-between; padding-top:10px;">
                        <MudButton Variant="Variant.Filled" Href="PurchaseRules/List" Color="Color.Dark">Back to</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    </div>

                </div>
            </EditForm>
        }
    </MudCardContent>
</MudCard>
@code {
    [Parameter]
    public int id { get; set; }
    private PurchaseRule PurchaseRule { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        var data = await this.http.GetFromJsonAsync<PurchaseRule>($"/api/PurchaseRules/{id}");
        if (data is null)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to load PurchaseRule.", Severity.Error);
        }
        else
        {
            this.PurchaseRule = data;
        }
    }
    private async void HandleValidSubmit(EditContext editContext)
    {

        await this.Save();

    }
    private async Task Save()
    {
        var response = await this.http.PutAsJsonAsync<PurchaseRule>($"/api/PurchaseRules/{id}", this.PurchaseRule);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}