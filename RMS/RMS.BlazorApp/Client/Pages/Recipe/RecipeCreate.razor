@page "/Recipes/Add"
@inject HttpClient http
@inject ISnackbar snackbar

<MudCard Class="card-f" Style="width:60%; margin-top:40px; margin: 10px auto; background-color:antiquewhite">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText style="text-align:center;" Typo="Typo.h6">Add new Recipe</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <EditForm Model="@Recipe" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <div style="display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 16px;">
                <div style="width:48%; margin-bottom: 16px;">
                    <MudTextField Variant="Variant.Outlined" Label="Recipe Name" @bind-Value="Recipe.RecipeName" />
                </div>

                <div style="width:48%; margin-bottom: 16px;">
                    <MudTextField Variant="Variant.Outlined" Label="Serving Number" @bind-Value="Recipe.ServingNumber" />
                </div>

                <div style="width:48%; margin-bottom: 16px;">
                    <MudTextField Variant="Variant.Outlined" Label="Recipe Quantity" @bind-Value="Recipe.RecipeQuantity" />
                </div>
            </div>
            <div>
                <MudText style="text-align:center;" Typo="Typo.h6">Recipe Ingredients</MudText>
                <div class="d-flex justify-content-end" style="margin-left:670px; margin-bottom:15px;">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" Class="mr-2" OnClick="@AddRecipes" />
                </div>

                @foreach (var details in Recipe.RecipeIngredients)
                {
                    <div style="display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 16px;">
                        <div style="width: 48%; margin-bottom: 16px;">
                            <MudSelect @ref="mudSelectItem" @bind-Value="details.ItemId" T="int" Variant="Variant.Outlined" Label="Item Name">
                                @if (this.items is not null)
                                {
                                    @foreach (var item in items)
                                    {
                                        <MudSelectItem Value="@item.ItemId">@item.ItemName</MudSelectItem>
                                    }
                                }
                                <MudSelectItem Value="0">Select one</MudSelectItem>
                            </MudSelect>
                        </div>

                        <div style="width: 48%; margin-bottom: 16px;">
                            <MudSelect @ref="mudSelectRecipe" @bind-Value="details.RecipeId" T="int" Variant="Variant.Outlined" Label="Recipe Name">
                                @if (this.recipes is not null)
                                {
                                    @foreach (var recipe in recipes)
                                    {
                                        <MudSelectItem Value="@recipe.RecipeId">@recipe.RecipeName</MudSelectItem>
                                    }
                                }
                                <MudSelectItem Value="0">Select one</MudSelectItem>
                            </MudSelect>
                        </div>

                        <div style="width:48%; margin-bottom: 16px;">
                            <MudTextField Variant="Variant.Outlined" Label="Ingredient Quantity" @bind-Value="details.IngredientQuantity" />
                        </div>

                        <div style="margin-left: 5px; margin-top:20px; font:300">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Secondary" Class="mr-2" OnClick="@(() => RemoveRecipe(details))" />
                        </div>
                    </div>
                }
            </div>
            <div style="display:flex; justify-content:space-between; padding-top:10px;">
                <MudButton Variant="Variant.Filled" Href="Recipes" Color="Color.Dark">Back to</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
            </div>
        </EditForm>
    </MudCardContent>
</MudCard>
@code {
    private Recipe Recipe = new Recipe();
    private List<Recipe>? recipes;
    private List<Item>? items;

    MudSelect<int> mudSelectRecipe = null!;
    MudSelect<int> mudSelectItem = null!;

    protected override async Task OnInitializedAsync()
    {
        recipes = await http.GetFromJsonAsync<List<Recipe>>("/api/Recipes");
        items = await http.GetFromJsonAsync<List<Item>>("/api/Items");

        Recipe.RecipeIngredients = new List<RecipeIngredient>
        {
            new RecipeIngredient()
        };
    }

    private async Task HandleValidSubmit()
    {
        await Save();
    }

    private void AddRecipes()
    {
        if (Recipe.RecipeIngredients == null)
        {
            Recipe.RecipeIngredients = new List<RecipeIngredient>();
        }

        Recipe.RecipeIngredients.Add(new RecipeIngredient());
    }

    private void RemoveRecipe(RecipeIngredient detail)
    {
        if (Recipe.RecipeIngredients != null)
        {
            Recipe.RecipeIngredients.Remove(detail);
        }
    }

    private async Task Save()
    {
        var response = await http.PostAsJsonAsync<Recipe>("/api/Recipes", this.Recipe);
        if (response.IsSuccessStatusCode)
        {
            snackbar.Clear();
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            snackbar.Add("Data saved.", Severity.Success);

            Recipe = new Recipe
                {
                    RecipeIngredients = Recipe.RecipeIngredients,
                };
            StateHasChanged();
        }
        else
        {
            snackbar.Clear();
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}
