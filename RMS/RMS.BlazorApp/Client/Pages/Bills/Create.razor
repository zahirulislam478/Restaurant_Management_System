@page "/Bills/Add"
@inject HttpClient http
@inject ISnackbar snackbar;

<MudCard Class="card-f" Style="width: 60%; margin-top:40px; margin: 10px auto; background-color:antiquewhite">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText style="text-align:center;" Typo="Typo.h6">Add new Bill</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm Model="@bill" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <div style="display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 16px;">
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Variant="Variant.Outlined" Label="SupplierBillInvoiceNumber" @bind-Value="bill.SupplierBillInvoiceNumber" For="@(() => bill.SupplierBillInvoiceNumber)" />
                </div>
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudDatePicker Variant="Variant.Outlined" Label="Date"
                                   @bind-Date="bill.Date" For="@(() => bill.Date)" />
                </div>
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Variant="Variant.Outlined" Label="BillAmount"
                                  @bind-Value="bill.BillAmount" For="@(() => bill.BillAmount)" />
                </div>
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Variant="Variant.Outlined" Label="PaidAmount"
                                  @bind-Value="bill.PaidAmount" For="@(() => bill.PaidAmount)" />
                </div>
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Variant="Variant.Outlined" Label="TotalAmount"
                                  @bind-Value="bill.TotalAmount" For="@(() => bill.TotalAmount)" />
                </div>
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudSelect @ref="mudSelectPurchaseOrder" @bind-Value="bill.PurchaseOrderId" T="int" Variant="Variant.Outlined" Label="InvoiceNumber">
                        @if (this.purchaseOrders is not null)
                        {
                            @foreach (var bill in purchaseOrders)
                            {
                                <MudSelectItem Value="@bill.PurchaseOrderId">@bill.InvoiceNumber</MudSelectItem>
                            }
                        }
                        <MudSelectItem Value="0">Select one</MudSelectItem>
                    </MudSelect>
                </div>

                <div style="width: 48%; margin-bottom: 16px;">
                    <MudSelect @ref="mudSelectSupplier" @bind-Value="bill.SupplierId" T="int" Variant="Variant.Outlined" Label="SupplierName">
                        @if (this.suppliers is not null)
                        {
                            @foreach (var bill in suppliers)
                            {
                                <MudSelectItem Value="@bill.SupplierId">@bill.SupplierName</MudSelectItem>
                            }
                        }
                        <MudSelectItem Value="0">Select one</MudSelectItem>
                    </MudSelect>
                </div>
            </div>
            <div style="display:flex; justify-content:space-between; padding-top:10px;">
                <MudButton Variant="Variant.Filled" Href="/Bills" Color="Color.Dark">Back to</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
            </div>
        </EditForm>
    </MudCardContent>
</MudCard>
@code {
    private Bill bill = new Bill();
    private List<PurchaseOrder>? purchaseOrders;
    private List<Supplier>? suppliers;

    MudSelect<int> mudSelectPurchaseOrder = null!;
    MudSelect<int> mudSelectSupplier = null!;

     protected override async Task OnInitializedAsync()
    {
        purchaseOrders = await http.GetFromJsonAsync<List<PurchaseOrder>>("/api/PurchaseOrders");
        suppliers = await http.GetFromJsonAsync<List<Supplier>>("/api/Suppliers");
    }

    private async void HandleValidSubmit(EditContext editContext)
    {

        await this.Save();

    }
    private async Task Save()
    {
        var response = await this.http.PostAsJsonAsync<Bill>("/api/Bills", this.bill);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
            this.bill = new Bill();
            this.StateHasChanged();
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}

