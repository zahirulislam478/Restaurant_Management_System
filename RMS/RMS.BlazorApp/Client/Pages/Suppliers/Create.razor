@page "/Suppliers/Add"
@inject HttpClient http
@inject ISnackbar snackbar;

<MudCard Style="margin-top:20px">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add new Supplier</MudText>
        </CardHeaderContent>

    </MudCardHeader>
    <MudCardContent>
        <EditForm Model="@supplier" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="col-2">
                <MudTextField Label="Supplier Name" @bind-Value="supplier.SupplierName" For="@(() => supplier.SupplierName)" />
            </div>


            <div class="col-2">
                <MudTextField Label="Address"
                @bind-Value="supplier.Address" For="@(() => supplier.Address)" />
            </div>
            <div class="col-2">
                <MudTextField Label="Contact No"
                @bind-Value="supplier.ContactNo" For="@(() => supplier.ContactNo)" />
            </div>
            <div class="col-2">
                <span></span>
                <div style="display:flex; justify-content:space-between; padding-top:10px;">
                    <MudButton Variant="Variant.Filled" Href="Suppliers/List" Color="Color.Dark">Back to</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </div>

            </div>
        </EditForm>
    </MudCardContent>
</MudCard>
@*<div>
    @JsonSerializer.Serialize(this.supplier);
</div>*@
@code {
    private Supplier supplier = new Supplier();


    private async void HandleValidSubmit(EditContext editContext)
    {

        await this.Save();

    }
    private async Task Save()
    {
        var response = await this.http.PostAsJsonAsync<Supplier>("/api/Suppliers", this.supplier);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
            this.supplier = new Supplier();
            this.StateHasChanged();
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}

