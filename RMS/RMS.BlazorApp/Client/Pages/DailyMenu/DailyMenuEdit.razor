@page "/DailyMenus/Edit/{id:int}"
@inject HttpClient http
@inject ISnackbar snackbar

<MudCard Class="card-f" Style="width:60%; margin-top: 60px; margin: 10px auto; background-color:antiquewhite">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Edit DailyMenu</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        @if (DailyMenu is null)
        {
            <ProgressIndicator />
        }
        else
        {
            <EditForm Model="@DailyMenu" OnSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />

                <div style="display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 16px;">
                    <div style="width: 48%; margin-bottom: 16px;">
                        <MudSelect @ref="mudSelectRecipe" @bind-Value="DailyMenu.RecipeId" T="int" Variant="Variant.Outlined" Label="Recipe Name">
                            @if (this.recipes is not null)
                            {
                                @foreach (var DailyMenu in recipes)
                                {
                                    <MudSelectItem Value="@DailyMenu.RecipeId">@DailyMenu.RecipeName</MudSelectItem>
                                }
                            }
                            <MudSelectItem Value="0">Select one</MudSelectItem>
                        </MudSelect>
                    </div>

                    <div style="width:48%; margin-bottom: 16px;">
                        <MudDatePicker Variant="Variant.Outlined" Label="Serving Date"
                                       @bind-Date="@DailyMenu.ServingDate"
                                       DateFormat="dd/MM/yyyy"
                                       For="@(() => DailyMenu.ServingDate)" />
                    </div>

                    <div style="width:48%; margin-bottom: 16px;">
                        <MudTextField Variant="Variant.Outlined" Label="Serving Quantity" @bind-Value="DailyMenu.ServingQuantity" For="@(() => DailyMenu.ServingQuantity)" />
                    </div>
                </div>
                <div>
                    <MudText style="text-align:center;" Typo="Typo.h6">Requisitions</MudText>
                    <div class="d-flex justify-content-end" style="margin-left:670px; margin-bottom:15px;">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" Class="mr-2" OnClick="@AddDailyMenus" />
                    </div>

                    @foreach (var details in DailyMenu.Requisitions)
                    {
                        <div style="display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 16px;">
                            <div style="width: 48%; margin-bottom: 16px;">
                                <MudSelect @ref="mudSelectItem" @bind-Value="details.ItemId" T="int" Variant="Variant.Outlined" Label="Item Name">
                                    @if (this.items is not null)
                                    {
                                        @foreach (var details in items)
                                        {
                                            <MudSelectItem Value="@details.ItemId">@details.ItemName</MudSelectItem>
                                        }
                                    }
                                    <MudSelectItem Value="0">Select one</MudSelectItem>
                                </MudSelect>
                            </div>

                            <div style="width: 48%; margin-bottom: 16px;">
                                <MudSelect @ref="mudSelectDailyMenu" @bind-Value="details.DailyMenuId" T="int" Variant="Variant.Outlined" Label="Serving Date">
                                    @if (this.dailyMenus is not null)
                                    {
                                        @foreach (var details in dailyMenus)
                                        {
                                            <MudSelectItem Value="@details.DailyMenuId">@details.ServingDate</MudSelectItem>
                                        }
                                    }
                                    <MudSelectItem Value="0">Select one</MudSelectItem>
                                </MudSelect>
                            </div>

                            <div style="width: 48%; margin-bottom: 16px;">
                                <MudTextField Variant="Variant.Outlined" Label="Requisition Quantity" @bind-Value="details.RequisitionQuantity" />
                            </div>

                            <div style="margin-left: 5px; margin-top:20px; font:300">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Secondary" Class="mr-2" OnClick="@(() => RemoveDailyMenu(details))" />
                            </div>
                        </div>
                    }
                </div>
                <div style="display:flex; justify-content:space-between; padding-top:10px;">
                    <MudButton Variant="Variant.Filled" Href="DailyMenus" Color="Color.Dark">Back to</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </div>
            </EditForm>
        }
    </MudCardContent>
</MudCard>
@code {
    [Parameter]
    public int id { get; set; }
    private DailyMenu DailyMenu { get; set; } = default!;
    private Requisition Requisition { get; set; } = default!;

    private List<Recipe>? recipes;
    private List<DailyMenu>? dailyMenus;
    private List<Item>? items;

    MudSelect<int> mudSelectRecipe = null!;
    MudSelect<int> mudSelectDailyMenu = null!;
    MudSelect<int> mudSelectItem = null!;

    protected override async Task OnInitializedAsync()
    {
        var data = await this.http.GetFromJsonAsync<DailyMenu>($"/api/DailyMenus/{id}");
        if (data is null)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to load DailyMenu.", Severity.Error);
        }
        else
        {
            this.DailyMenu = data;
        }

        recipes = await http.GetFromJsonAsync<List<Recipe>>("/api/Recipes");
        dailyMenus = await http.GetFromJsonAsync<List<DailyMenu>>("/api/DailyMenus");
        items = await http.GetFromJsonAsync<List<Item>>("/api/Items");

        DailyMenu.Requisitions = new List<Requisition>
        {
            new Requisition()
        };
    }

    private async void HandleValidSubmit(EditContext editContext)
    {
        await this.Save();
    }

    private void AddDailyMenus()
    {
        if (DailyMenu.Requisitions == null)
        {
            DailyMenu.Requisitions = new List<Requisition>();
        }

        DailyMenu.Requisitions.Add(new Requisition());
    }

    private void RemoveDailyMenu(Requisition detail)
    {
        if (DailyMenu.Requisitions != null)
        {
            DailyMenu.Requisitions.Remove(detail);
        }
    }

    private async Task Save()
    {
        var response = await this.http.PostAsJsonAsync<DailyMenu>("/api/DailyMenus", this.DailyMenu);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);

            DailyMenu = new DailyMenu
                {
                    Requisitions = DailyMenu.Requisitions,
                };
            this.StateHasChanged();
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}